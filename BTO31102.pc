/*
 */
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <math.h>
#include "lgf2control.h"
#include "exdcommon.h"

#include "bttrio.h"
#include "misexec.h"

EXEC SQL INCLUDE SQLCA;

/*--------------- External ---------------------*/
extern char  trddt[9];


/*--------------- Internal ---------------------*/
char *qodnm31102 = "BTO31102";

/*******************************************************************************
 * 설명      :
 * Prototype :
 * Arguments :
 * Return    :
 ******************************************************************************/
int BTO31102(int fd, void *arg, int len)
{
	PACKET_HD   *hd;
	ORDER_IN_HD *ordhd;
	ORDER_TRSM   in;
	ORDER_TRSMBK inbk;
	OUT_MSG      out;
	MIS_EXEC_DATA     misdata;

	/* 복수계좌그룹주문용 */
	char         brkgacntno[7];
	char         grpnm     [31];
	char         grppswd   [9];
	char         trddiv    [2];		/* 매매구분       */
	int          ordqty;			/* 주문수량       */
	int          grpid = 0, orgnordno;
	char         cgrpid[4];

	char         ordfrm [2];	/* 주문형태 */
	char         meddiv [2];	/* 매체구분 */
	char         msgcd [6];
	char         msg   [81];
	char         tmp   [50];
    char        *sendbuff;
    char         clntid[8];

	int          proccnt = 0;
	int          flag = 1, ordflag = 1;
	int          i, pos, outpos, ordcnt, rtn;
    int ordno;
    char         deptcd[3+1];
    char         posdiv[1+1];

	/*----------------------------------------------------------------------*/
	/* 1. Initial Process                                                   */
	/*----------------------------------------------------------------------*/
	hd    = (PACKET_HD *)arg;
	ordhd = (ORDER_IN_HD *)((char *)arg+sizeof(PACKET_HD));

	ordcnt = Str2Int(ordhd->ordcnt, 3);

	Logout("[%s] RCV HD  [%.34s]",   qodnm31102, (char *)arg+14);
	//Logout("[%s] RCV DATA[%.1024s]", qodnm31102, (char *)arg+sizeof(PACKET_HD));
#ifdef _DEBUG
	Logout("[%s] input hd   method   [%.1s]",  qodnm31102, hd->method);
	Logout("[%s] input hd   UserID   [%.8s]",  qodnm31102, hd->id);
	Logout("[%s] input hd   UserIP   [%.15s]", qodnm31102, hd->ipaddr);
	Logout("[%s] input data 주문건수 [%.3s]",  qodnm31102, ordhd->ordcnt);
	Logout("[%s] input data 매체구분 [%.1s]",  qodnm31102, ordhd->meddiv);
	Logout("[%s] input data 주문구분 [%.1s]",  qodnm31102, ordhd->orddiv);
	Logout("[%s] input data 주문형태 [%.1s]",  qodnm31102, ordhd->ordfrm);
	Logout("[%s] input data 거래구분 [%.1s]",  qodnm31102, ordhd->dealdiv);
	Logout("[%s] input data GrpNM    [%.30s]", qodnm31102, ordhd->grpnm);
#endif

	sprintf(meddiv, "%.1s", ordhd->meddiv);

	/* 응답 버퍼 할당 - 개별 응답처리 */
	sendbuff = (char *)malloc(sizeof(PACKET_HD) + 3 + sizeof(OUT_MSG) * ordcnt);

	memset(grpnm,         0x00, sizeof(grpnm));
	memset(sendbuff,      0x20, sizeof(sendbuff));
	memset((char *)&inbk, 0x00, sizeof(ORDER_TRSMBK));
	memset((char *)&out,  0x20, sizeof(OUT_MSG));

	memcpy(sendbuff, hd, sizeof(PACKET_HD));
	outpos  = sizeof(PACKET_HD);
	memcpy(sendbuff+outpos, ordhd->ordcnt, 3);
	outpos += 3;

	/* ID, IP, 사번은 반복에 관계없이 여기서 한번만 설정 */
	sprintf(inbk.ordinputid, "%.8s",  hd->id);
	sprintf(inbk.ordinputip, "%.15s", hd->ipaddr);
	sprintf(inbk.oppsnempno, "%.8s",  hd->empno);
	sprintf(ordfrm,          "%.1s",  ordhd->ordfrm);

    /*********************************************************************
     반대매매 주문 정정시 고객은 정정불가,경영지원팀장,Complince팀장만
     정정 가능하게 함
     ********************************************************************/

    if (ordhd->ordfrm[0] == 'd')
    {

        if(meddiv[0] != 'F') {

			Logout("[%s] 반대매매주문 정정불가", qodnm31102);
			sprintf(msgcd, "99912");
			sprintf(msg,   "반대매매 주문은 고객의 정정,취소가 불가합니다.");
			OrdMsgProc(msg, msgcd, meddiv, &out);
			EXEC SQL ROLLBACK WORK;
			BscOrdErrProc((char *)arg, len, (char *)&out, 0);
			EXEC SQL COMMIT WORK;
			*hd->flag = ERRORSET_FG;
			flag = 0;
        }


    }


	if (ordcnt > MAX_ORDCNT) {
		sprintf(msgcd, "50658");
		sprintf(msg,   "주문횟수 한도 초과, 일부처리를 하세요.");
		OrdMsgProc(msg, msgcd, meddiv, &out);
		EXEC SQL ROLLBACK WORK;
		BscOrdErrProc((char *)arg, len, (char *)&out, 0);
		EXEC SQL COMMIT WORK;
		*hd->flag = ERRORSET_FG;
		flag = 0;
	}

    /* OCO STOP, SCALE, 반복, OCO 그룹주문인경우 설정내역 Update */
	if (ordfrm[0] == '3' || ordfrm[0] == '4') {
		/* 그룹번호 채번 */
		if (SeqNoCreate(trddt,			/* 일자        I*/
						"G",		    /* 채번구분    I*/
						"GroupNo",		/* 채번명      I*/
						&grpid,			/* 그룹번호    O*/
						msgcd,			/* 에러코드    O*/
						msg				/* 에러메세지  O*/
						) < 0) {
			Logout("[%s] msgcd[%s] msg[%s]", qodnm31102, msgcd, msg);
			OrdMsgProc(msg, msgcd, meddiv, &out);
			Logout("[%s] output[%.*s]", qodnm31102, sizeof(OUT_MSG), out);
			flag = 0;

			*hd->flag = ERRORSET_FG;
			BscOrdErrProc((char *)arg, len, (char *)&out, 0);
			EXEC SQL COMMIT WORK;
		}
		EXEC SQL COMMIT WORK;

#ifdef _DEBUG
		Logout("[%s] 그룹ID[%d]", qodnm31102, grpid);
#endif

	}
    else if (ordfrm[0] == '5') {
		sprintf(grpnm,   "%.30s", ordhd->grpnm);
		sprintf(grppswd, "%.8s",  ordhd->grppswd);

		StrTrim (tmp, grpnm, strlen(grpnm));
		/* 복수계좌명이 입력되었을때만 체크한다. */
		/* 복수계좌주문 그룹비밀번호 Check */
		if (strlen(tmp) > 0) {
			sprintf(grpnm, "%.*s", strlen(tmp), tmp);
			if (ChkPlrAcntGrpPswd(
							inbk.ordinputid,/* USER ID             I*/
							grpnm,			/* 그룹명              I*/
							grppswd,		/* 그룹ID              I*/
							msgcd,			/* 에러코드            O*/
							msg				/* 에러메세지          O*/
							) < 0) {
				Logout("[%s] msgcd[%s] msg[%s]", qodnm31102, msgcd, msg);

				OrdMsgProc(msg, msgcd, meddiv, &out);
				Logout("[%s] output[%.*s]", qodnm31102, sizeof(OUT_MSG), out);
				flag = 0;

				*hd->flag = ERRORSET_FG;
				BscOrdErrProc((char *)arg, len, (char *)&out, 0);
				EXEC SQL COMMIT WORK;
			}
		}
		/* 그룹명이 없으면 읽는다 */
		else {
			pos = sizeof(PACKET_HD) + sizeof(ORDER_IN_HD);
			memset((char *)&in, 0x00, sizeof(ORDER_TRSM));
			memcpy((char *)&in, (char *)ordhd, sizeof(ORDER_IN_HD));
			memcpy((char *)&in+sizeof(ORDER_IN_HD), (char *)arg+pos,
													sizeof(ORDER_IN));
			sprintf(brkgacntno, "%.6s", in.ordin.brkgacntno);
			orgnordno = Str2Int(in.ordin.orgnordno, 7);

			/* 2011.07.26 김기성 PK사용하도록 힌트 강제함 */
			EXEC SQL
			SELECT  /*+ INDEX(BT01_Ord PK_BT01_Ord */
			      	GrpNm
			INTO	:grpnm
			FROM	BT01_Ord
			WHERE	BizDt      = :trddt
			AND		OrdNo      = :orgnordno
			AND		BrkgAcntNo = :brkgacntno;

			if (sqlca.sqlcode != 0) {
				sprintf(msgcd, "99999");
				sprintf(msg,   "복수계좌 그룹명 조회 오류");
				Logout("[%s] msgcd[%s] msg[%s]", qodnm31102, msgcd, msg);

				OrdMsgProc(msg, msgcd, meddiv, &out);
				Logout("[%s] output[%.*s]", qodnm31102, sizeof(OUT_MSG), out);
				flag = 0;

				*hd->flag = ERRORSET_FG;
				BscOrdErrProc((char *)arg, len, (char *)&out, 0);
				EXEC SQL COMMIT WORK;
			}
			StrTrim (tmp, grpnm, strlen(grpnm));
			sprintf(grpnm, "%.*s", strlen(tmp), tmp);
		}

		/* 복수계좌주문 그룹번호 채번 */
		if (SeqNoCreate(trddt,			/* 일자        I*/
						"P",		    /* 채번구분    I*/
						grpnm,			/* 채번명      I*/
						&grpid,			/* 그룹번호    O*/
						msgcd,			/* 에러코드    O*/
						msg				/* 에러메세지  O*/
						) < 0)
		{
			Logout("[%s] msgcd[%s] msg[%s]", qodnm31102, msgcd, msg);

			OrdMsgProc(msg, msgcd, meddiv, &out);
			Logout("[%s]output[%.*s]", qodnm31102, sizeof(OUT_MSG), out);
			flag = 0;

			*hd->flag = ERRORSET_FG;
			BscOrdErrProc((char *)arg, len, (char *)&out, 0);
			EXEC SQL COMMIT WORK;
		}
		EXEC SQL COMMIT WORK;

#ifdef _DEBUG
		Logout("복수계좌주문 그룹ID[%d]", grpid);
#endif

	}

	pos = sizeof(PACKET_HD) + sizeof(ORDER_IN_HD);

	sprintf(cgrpid, "%03d",     grpid);
	sprintf(grpnm,  "%-30.30s", grpnm);
	for (i = 0; i < ordcnt && flag == 1; i++) {
		memset((char *)&in, 0x00, sizeof(ORDER_TRSM));
		memcpy((char *)&in, (char *)ordhd, sizeof(ORDER_IN_HD));
		memcpy((char *)&in+sizeof(ORDER_IN_HD), (char *)arg+pos,
												sizeof(ORDER_IN));

		/* 일반주문은 grpid 가 의미가 없다 */
		memcpy(in.ordin.grpid,  cgrpid,  3);
		memcpy(in.ordhd.grpnm,  grpnm,  30);
 
#ifdef _DEBUG
		Logout("[%s] in[%.*s]", qodnm31102, sizeof(ORDER_TRSM), in);
		Logout("[%s] GROUP ID[%s:%.3s]", qodnm31102, cgrpid, in.ordin.grpid);
#endif

		/*------------------------------------------------------------------*/
		/* 1. 기본정보 채우기                                               */
		/*------------------------------------------------------------------*/
		if (CrrtOrdMvIn2Inbk(in, &inbk, msgcd, msg) < 0) {
			Logout("[%s] 기본정보 채우기 Error : msgcd[%s] msg[%s]",
				qodnm31102, msgcd, msg);
			OrdMsgProc(msg, msgcd, meddiv, &out);
			Logout("[%s] output[%.*s]", qodnm31102, sizeof(OUT_MSG), out);
			ordflag = 0;
			BscOrdErrProc((char *)arg, len, (char *)&out, i+1);
			EXEC SQL COMMIT WORK;
		}

		/* 위 기본정보 채우기 오류 확인 : 오류면 다음 주문으로 */
		if (ordflag == 1) {
			/*---------------------------------------------------------------*/
			/* 2. Data Process                                               */
			/*---------------------------------------------------------------*/
			rtn = CrrtOrdProc(inbk, &out);
			if (rtn < 0) {
				EXEC SQL ROLLBACK WORK;
				OrdErrProc((char *)arg, len, (char *)&inbk, (char *)&out, i+1);
				EXEC SQL COMMIT WORK;
				if (ordcnt == 1 || hd->method[0] == 'W')
					*hd->flag = ERRORSET_FG;
			}
			else {
				EXEC SQL COMMIT WORK;

                /* 2006.01.23 백두현 */
                if  (ordhd->clientid[0] != ' ')
                {
                    /* 2006.01.23 백두현, BL06 테이블에 Client전송 KEY field 추가 입력 */
                    sprintf(clntid,   "%.7s", ordhd->clientid);
                    ordno = Str2Int(out.ordno, 7);

                    EXEC SQL
                    UPDATE BT01_Ord
                       SET CliOrdNo = :clntid
                     WHERE BizDt      = :inbk.trddt
                       AND BrkgAcntno = :inbk.brkgacntno
                       AND BrchNo     = :inbk.brchno
                       AND OrdNo      = :ordno;
                }

                EXEC SQL COMMIT WORK;

				/* MIS Data Send */
				misdata.ordexecdiv[0] = '1'; /* 주문 */
				memset (misdata.bizdt, 0x00, sizeof(misdata.bizdt)); 
				memcpy (misdata.brchno,    inbk.brchno, 3);
				memcpy (misdata.ordno,     out.ordno, sizeof(out.ordno));
				memcpy(misdata.execno,    "0000",   4);
				if (MISExec(misdata, MIS_EXEC_DATA_SIZE) < 0) {
					Logout("[%s] 주문 : MISExec 전송 오류!!", __FILE__);
				}

#ifdef _DEBUG
				Logout("[%s] 주문 : MISExec 전송 완료!!", __FILE__);
#endif

			}
		}

		memcpy(sendbuff+outpos, out.msgcd, 5);
		outpos += sizeof(out.msgcd);
		memcpy(sendbuff+outpos, out.ordno, 7);
		outpos += sizeof(out.ordno);
        memcpy(sendbuff+outpos, ordhd->clientid, 7);
        outpos += sizeof(ordhd->clientid);
		pos    += sizeof(ORDER_IN);

		if (ordflag == 1 && rtn == 1) proccnt++;
		ordflag = 1;
		rtn = 0;
	}

	/*----------------------------------------------------------------------*/
	/* 3. Send Process                                                      */
	/*----------------------------------------------------------------------*/
	if (flag == 1) {
		rtn = WriteStream2(fd, sendbuff, outpos);
		if (rtn <= 0) {
			Logout("output data send error!![%d]", rtn);
		}
	}

	if (ordcnt == 1) {
		/* Message 전송 */
		*hd->cmd = 'M';
		memcpy(sendbuff, hd, sizeof(PACKET_HD));
		memcpy(&sendbuff[sizeof(PACKET_HD)], out.msg, 80);
		rtn = WriteStream2(fd, sendbuff, sizeof(PACKET_HD)+80);
		if (rtn <= 0) {
			Logout("[%s] output data send error!![%d]", qodnm31102, errno);
		}
	}
	else {
		*hd->cmd = 'M';
		/* 전체거부처리 */
		if (proccnt == 0) {
			memcpy(sendbuff, hd, sizeof(PACKET_HD));
			memcpy(&sendbuff[sizeof(PACKET_HD)], out.msg, 80);
			rtn = WriteStream2(fd, sendbuff, sizeof(PACKET_HD)+80);
		}
		/* 전체처리 */
		else if (proccnt == ordcnt) {
            if  (meddiv[0] == 'G')
                sprintf(out.msg, "%-80.80s", "Order received.");
            else
                sprintf(out.msg, "%-80.80s", "정상주문 처리되었습니다.");
			memcpy(sendbuff, hd, sizeof(PACKET_HD));
			memcpy(&sendbuff[sizeof(PACKET_HD)], out.msg, 80);
			rtn = WriteStream2(fd, sendbuff, sizeof(PACKET_HD)+80);
		}
		/* 일부처리 */
		else {
			if  (meddiv[0] == 'G')
                sprintf(out.msg, "%-80.80s", "Partial orders were rejected.");
            else
                sprintf(out.msg, "%-80.80s", "일부주문 거부 처리되었습니다.");
			memcpy(sendbuff, hd, sizeof(PACKET_HD));
			memcpy(&sendbuff[sizeof(PACKET_HD)], out.msg, 80);
			rtn = WriteStream2(fd, sendbuff, sizeof(PACKET_HD)+80);
		}

		if (rtn <= 0) {
			Logout("[%s] output data send error!![%d]", qodnm31102, errno);
		}
	}



	memcpy(hd->cmd, "R", 1);
	memcpy(sendbuff, hd, sizeof(PACKET_HD));
	rtn = WriteStream2(fd, sendbuff, sizeof(PACKET_HD));
	if (rtn <= 0) {
		Logout("output data send error!![%d]", rtn);
	}

	/* 할당해제 */
	free(sendbuff);

	return 1;
}
