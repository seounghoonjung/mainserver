/*
 * 설명   : 예약주문설정 등록/취소
 * NAME   : BTU31203.pc
 * DATE   : 2004년 6월  1일 화요일 오후 08시 21분 23초
 * By     : [아이티캐슬] 
 * Remark : 
 * 2006.01.23 백두현, 주문접수 Return 시 Client전송 KEY를 추가
 * 2007.05.22 정승훈, 제도통합 관련 수정완료
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include "lgf2control.h"
#include "exdcommon.h"

#include "bttrio.h"
#include "fuoptordlib.h"
#include "realordexec.h"

EXEC SQL INCLUDE SQLCA;

/*--------------- External ---------------------*/
extern char trddt[9];

/*--------------- Internal ---------------------*/
char *qodnm31203 = "BTU31203";

static char ordinputid [9];
static char ordinputip [16];
static char oppsnempno [9];

/*******************************************************************************
 * 설명      :
 * Prototype :
 * Arguments :
 * Return    :
 ******************************************************************************/
int BTU31203Proc(in, out)
ORDER_TRSM *in;
OUT_MSG    *out;
{
	ORDER_TRSMBK inbk;

	char fixcontyn[2];
	char sendbuff [1024];
	char meddiv   [2];

    char optyn[1+1];
    char bondyn[1+1];
    char spotdiv[1+1];
    char postmrgnyn[1+1];
	char msgcd    [6] = "0";
	char msg      [81];
	char buff     [50];

	memset((char *)&inbk, 0x00, sizeof(ORDER_TRSMBK));
	memset(optyn, 0x00, sizeof(optyn));
	memset(bondyn, 0x00, sizeof(bondyn));
	memset(postmrgnyn, 0x00, sizeof(postmrgnyn));

	sprintf(meddiv, "%.1s", in->ordhd.meddiv);

	/*-------------------------------------------------------------------*/
	/* 1. 기본정보 채우기                                                */
	/*-------------------------------------------------------------------*/
	if (in->ordhd.orddiv[0] == '1') {
		if (OrdMvIn2Inbk(in, &inbk, msgcd, msg) < 0) {
			Logout("[%s] 기본정보 Check Error : msgcd[%s] msg[%s]",
				__func__, msgcd, msg);
			OrdMsgProc(msg, msgcd, meddiv, out);
			Logout("[%s] output[%.*s]", __func__, sizeof(OUT_MSG), out);
			return -1;
		}

		EXEC SQL
		SELECT  nvl(FixContYN, 'N'),
                postmrgnyn,
                KTBAcntYn
		INTO    :fixcontyn,
                :postmrgnyn,
                :bondyn
		FROM    BA13_BrkgAcntMst
		WHERE   BrkgAcntNo = :inbk.brkgacntno;

		if (sqlca.sqlcode != 0) {
			Logout("[%s] 예약주문 FIX약정 조회 오류:[%s]",
				__func__, sqlca.sqlerrm.sqlerrmc);
			sprintf(msgcd, "99999");
			if (sqlca.sqlcode == 1403) {
				sprintf(msgcd, "20010");
			}
			OrdMsgProc(msg, msgcd, meddiv, out);
			Logout("[%s] output[%.*s]", __func__, sizeof(OUT_MSG), out);
			return -1;
		}

#if 0
		if (fixcontyn[0] == 'Y') {
			sprintf(msgcd, "98013");
			Logout("[%s] 예약주문 FIX약정 Check 거부 : msgcd[%s]",
				__func__, msgcd);
			OrdMsgProc(msg, msgcd, meddiv, out);
			Logout("[%s] output[%.*s]", __func__, sizeof(OUT_MSG), out);
			return -1;
		}
#endif


	}
	else if (in->ordhd.orddiv[0] == '3') {
		if (CxlOrdMvIn2Inbk(in, &inbk, msgcd, msg) < 0) {
			Logout("[%s] 기본정보 Check Error : msgcd[%s] msg[%s]",
				__func__, msgcd, msg);
			OrdMsgProc(msg, msgcd, meddiv, out);
			Logout("[%s] output[%.*s]", __func__, sizeof(OUT_MSG), out);
			return -1;
		}
	}
	else {
		Logout("[%s] 대기주문은 가격정정이 불가능. 거부 : msgcd[%s] msg[%s]",
			__func__, msgcd, msg);
		sprintf(msgcd, "50056");
		OrdMsgProc(msg, msgcd, meddiv, out);
		Logout("[%s] output[%.*s]", __func__, sizeof(OUT_MSG), out);
		return -1;
	}
	/* strcpy(inbk.wtordsetyn, "Y");	 예약주문설정여부 'Y':예약주문 */


    if (in->ordhd.dealdiv[0] == '2')
    {

        if(postmrgnyn[0] == 'N')
        {
		    sprintf(msgcd, "98030");
			Logout("[%s] 시간예약주문은 사후증거금 계좌만 가능합니다. : msgcd[%s]", __func__, msgcd);
			OrdMsgProc(msg, msgcd, meddiv, out);
			return -1;
        }

	  sprintf(inbk.wtordsetyn, "%.1s", "Y");
    }
    else
    {
	  sprintf(inbk.wtordsetyn, "%.1s", "N");
    }


	sprintf(inbk.ordinputid, "%.8s",  ordinputid);
	sprintf(inbk.ordinputip, "%.15s", ordinputip);
	sprintf(inbk.oppsnempno, "%.8s",  oppsnempno);

	/*-------------------------------------------------------------------*/
	/* 2. Data Process                                                   */
	/*-------------------------------------------------------------------*/
	if (WaitOrd(&inbk, msgcd) < 0) {

        if(memcmp(msgcd , "97004" , 5) == 0)
        {
           strcpy(msg , "비밀번호 오류입니다.");
        }
		OrdMsgProc(msg, msgcd, meddiv, out);
		Logout("[%s] output[%.*s]", __func__, sizeof(OUT_MSG), out);
		EXEC SQL ROLLBACK WORK;
		/* FIX Data 처리 (업무계오류시) */
		FixOrderNew(inbk.meddiv, inbk.ordqty, inbk.wtordsetyn, 
					inbk.brkgacntno, inbk.orddiv, inbk.ordfrm,
					inbk.orgnordno, inbk.trddt, inbk.brchno, 
					inbk.ordno, inbk.fixinfo, msgcd);
		return -1;
	}
	else
		EXEC SQL COMMIT WORK;

	/* FIX Data 처리 (업무계오류시) */
	FixOrderNew(inbk.meddiv, inbk.ordqty, inbk.wtordsetyn, 
				inbk.brkgacntno, inbk.orddiv, inbk.ordfrm,
				inbk.orgnordno, inbk.trddt, inbk.brchno, 
				inbk.ordno, inbk.fixinfo, msgcd);

	memcpy (msgcd, "00000", 5);
	OrdMsgProc(msg, msgcd, meddiv, out);
	sprintf(buff, "%07d", inbk.ordno);
	memcpy (out->ordno, buff, 7);
	Logout("[%s] output[%.*s]", __func__, sizeof(OUT_MSG), out);

	return 1;
}

/*******************************************************************************
 * 설명      :
 * Prototype :
 * Arguments :
 * Return    :
 ******************************************************************************/
int BTU31203(int fd, void *arg, int len)
{
	PACKET_HD   *hd;
	ORDER_IN_HD *ordhd;
	ORDER_TRSM   in;
	OUT_MSG      out;

	char         meddiv   [2];
	char         sendbuff [1024];
	char         msgcd    [6];
	char         msg      [81];
	int          ordflag = 1;
	int          cnt, pos, rtn, i;

	/*----------------------------------------------------------------------*/
	/* 1. Initial Process                                                   */
	/*----------------------------------------------------------------------*/
	hd    = (PACKET_HD *)arg;
	ordhd = (ORDER_IN_HD *)((char *)arg+sizeof(PACKET_HD));
	memset((char *)&out, 0x20, sizeof(OUT_MSG));

	/* Logout("[%s] RCV DATA[%.*s]", qodnm31203,len,(char *)arg+sizeof(PACKET_HD)); */
	#ifdef _DEBUG
	Logout("[%s] input hd  method   [%.1s]",  qodnm31203, hd->method);
	Logout("[%s] input hd  UserID   [%.8s]",  qodnm31203, hd->id);
	Logout("[%s] input hd  UserIP   [%.15s]", qodnm31203, hd->ipaddr);
	Logout("[%s] input dhd 주문건수 [%.3s]",  qodnm31203, ordhd->ordcnt);
	Logout("[%s] input dhd 매체구분 [%.1s]",  qodnm31203, ordhd->meddiv);
	Logout("[%s] input dhd 주문구분 [%.1s]",  qodnm31203, ordhd->orddiv);
	Logout("[%s] input dhd 주문형태 [%.1s]",  qodnm31203, ordhd->ordfrm);
	Logout("[%s] input dhd 거래구분 [%.1s]",  qodnm31203, ordhd->dealdiv);
	#endif

	sprintf(meddiv, "%.1s", ordhd->meddiv);

	sprintf(ordinputid, "%.8s",  hd->id);
	sprintf(ordinputip, "%.15s", hd->ipaddr);
	sprintf(oppsnempno, "%.8s",  hd->empno);

	pos = sizeof(PACKET_HD) + sizeof(ORDER_IN_HD);
	cnt = Str2Int(ordhd->ordcnt, 3);

	if(cnt > MAX_ORDCNT) {
		Logout("[%s] 해당내역이 최대주문 건을 초과하였습니다.", qodnm31203);
		sprintf(out.msgcd, "50658");
		sprintf(out.msg,   "대상 내역 한도초과, 일부처리를 하세요.");
		OrdMsgProc(msg, msgcd, meddiv, &out);
		BscOrdErrProc((char *)arg, len, (char *)&out, 0);
		*hd->flag = ERRORSET_FG;
		ordflag = 0;
	}

	for (i = 0; i < cnt && ordflag == 1; i++) {
		memset((char *)&in, 0x00, sizeof(ORDER_TRSM));
		memcpy((char *)&in, (char *)ordhd, sizeof(ORDER_IN_HD));
		memcpy((char *)&in+sizeof(ORDER_IN_HD), (char *)arg+pos,
												sizeof(ORDER_IN));

		if (BTU31203Proc(&in, &out) < 0) {
			EXEC SQL ROLLBACK WORK;
			BscOrdErrProc((char *)arg, len, (char *)&out, i+1);
			EXEC SQL COMMIT WORK;
		}
		else {
			EXEC SQL COMMIT WORK;
		}

#ifdef _DEBUG
		Logout("[%s] 개별건 처리완료.......", qodnm31203);
#endif

		pos += sizeof(ORDER_IN);
	}

	/*----------------------------------------------------------------------*/
	/* 3. Send Process                                                      */
	/*----------------------------------------------------------------------*/
	memcpy(sendbuff, hd, sizeof(PACKET_HD));
	memcpy(&sendbuff[sizeof(PACKET_HD)],   "001", 3);
	memcpy(&sendbuff[sizeof(PACKET_HD)+3], out.msgcd,     5);
	memcpy(&sendbuff[sizeof(PACKET_HD)+8], out.ordno,     7);
	memcpy(&sendbuff[sizeof(PACKET_HD)+15], ordhd->clientid,     7);
	rtn = WriteStream2(fd, sendbuff, sizeof(PACKET_HD)+3+19);
	if (rtn <= 0) {
		Logout("[%s] output data send error!![%d]", qodnm31203, rtn);
	}

	/* Message 전송 */
	*hd->cmd = 'M';
	memcpy(sendbuff, hd, sizeof(PACKET_HD));
	memcpy(&sendbuff[sizeof(PACKET_HD)], out.msg, 80);
	rtn = WriteStream2(fd, sendbuff, sizeof(PACKET_HD)+80);
	if (rtn <= 0) {
		Logout("[%s] output data send error!![%d]", qodnm31203, rtn);
	}

	/* Realease */
	*hd->cmd = 'R';
	memcpy(sendbuff, hd, sizeof(PACKET_HD));
	rtn = WriteStream2(fd, sendbuff, sizeof(PACKET_HD));
	if (rtn <= 0) {
		Logout("[%s] output data send error!![%d]", qodnm31203, rtn);
	}

	return 1;
}
