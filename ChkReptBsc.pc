/*
 * 설명   :	KOSPI 옵션 주문전송 - I/F 분리 임시 프로그램
 * NAME   : OrdProc.pc
 * DATE   : 2004년 7월 24일 토요일 오전 10시 28분 49초
 * By     : [이름쓰기] 
 * Remark : 
 * 2006.02.28 백두현, FIXContChk(FIX약정계좌의 경우 주문거부) 제거
 * 2007.05.21 정승훈, 제도통합 관련 수정완료
 * 2008.04.18 정승훈, 주식선물 관련 수정완료
 * 2010.08.10 유태성, 상품전용계좌 체크
 */
#include <stdio.h>
#include <stdlib.h>

#include "bttrio.h"
#include "fuoptordlib.h"
#include "kspmargin.h"
#include "realordexec.h"

EXEC SQL INCLUDE SQLCA;

extern double GetTime2Double();

/*******************************************************************************
 * 설명      : 주문전송 주 처리부
 * Prototype :
 * Arguments : 핸들, 입력데이타
 * Return    :
 ******************************************************************************/
int ChkReptBsc(inbk, msgcd, msg)
ORDER_TRSMBK *inbk;
char         *msgcd;
char         *msg;
{

     char   optyn[1+1];
     char   ktbacntyn[1+1];
     char   kpyn[1+1];
     
     char   commodityyn[1+1]; /* 상품전용계좌여부 */
     char   mkttypcd[3+1]; /* 상품전용계좌여부 */

     char   ordchkyn[1+1];  /* 적격개인투자자로직여부 */
     char   eduyn[1+1];
     char   prvtcorpdiv[1+1];
    char   homefrgndiv[1+1];
     char   avaloptyn[1+1];
    char   credityn[1+1];

     memset(optyn , 0x00 , sizeof(optyn));
     memset(ktbacntyn , 0x00 , sizeof(ktbacntyn));
     memset(kpyn , 0x00 , sizeof(kpyn));
     
     memset(commodityyn	, 0x00 , sizeof(commodityyn));
     memset(mkttypcd		, 0x00 , sizeof(mkttypcd));    

    memset(ordchkyn , 0x00 , sizeof(ordchkyn));
    memset(eduyn , 0x00 , sizeof(eduyn));
    memset(prvtcorpdiv , 0x00 , sizeof(prvtcorpdiv));
    memset(homefrgndiv , 0x00 , sizeof(homefrgndiv));
    memset(avaloptyn , 0x00 , sizeof(avaloptyn));
    memset(credityn , 0x00 , sizeof(credityn));

    memcpy(credityn , "N" , 1);

#ifdef _DEBUG
	Logout("[%s] >> 반복주문 기본 Check 시작................", __func__);
#endif


    if(inbk->brkgacntno[0] != '9') {

		EXEC SQL
		SELECT OptBuyYn, KTBAcntYN, CommodityAcntYN, b.Eduyn , b.PrvtCorpDivCd, a.optyn, b.HomeFrgnDivCd
		INTO  :optyn , :ktbacntyn, :commodityyn, :eduyn, :prvtcorpdiv, :avaloptyn, :homefrgndiv
		FROM  BA13_BrkgAcntMst A,
			  BA01_CustMst B
		WHERE BrkgAcntno = :inbk->brkgacntno
		AND	  a.custno = b.custno;

		if (sqlca.sqlcode != 0) {
			
			Logout("옵션매수전용계좌 SELECT 오류 ERROR!![%s]",sqlca.sqlerrm.sqlerrmc);
			sprintf(msgcd, "99999");
			sprintf(msg,   "옵션매수 계좌조회 오류 ERROR");
			return -1;
		}
	}

         EXEC SQL
         SELECT 'Y'
         INTO   :credityn
         FROM   BS05_ExApndMrgnMst A
         WHERE  A.Bizdt = :inbk->trddt
         AND    A.BrkgAcntno = :inbk->brkgacntno
         AND    A.ActYN      = 'Y';

         if(sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
         {
            Logout("장중추가증거금 SELECT 오류 ERROR!![%s]", sqlca.sqlerrm.sqlerrmc);
         }


    if(credityn[0] == 'Y')
    {
		Logout("장중추가증거금 계좌는 반복주문 불가 ");
		sprintf(msgcd, "99985");
		sprintf(msg,   "신규주문 제한 고객입니다.");
		return -1;
    }

    /*-------------------------------------------------------------------*/
    /* 국채 전용계좌의 주문 Check                                        */
    /*-------------------------------------------------------------------*/
     if (ktbacntyn[0] == 'Y') {

          EXEC SQL
          SELECT ClrrgtDiv
          INTO   :kpyn
          FROM   BZ52_CmdtBscInf 
          WHERE  CmdtCd = :inbk->cmdtcd;

          if (sqlca.sqlcode != 0) {
   
            Logout("국채 전용계좌 주문 유효성 CHECK ERROR!![%s]",sqlca.sqlerrm.sqlerrmc);
            sprintf(msgcd, "99999");
            sprintf(msg,   "국채 전용계좌 조회 오류");
            return -1;
          }

         if (kpyn[0] == '2')
         {
            Logout("상품선물 이외의 주문 ERROR!![%s]", inbk->cmdtcd);
            sprintf(msgcd, "99984");
            sprintf(msg,   " 국채등전용계좌는 KOSPI,STAR,주식선물은 불가합니다.");
            return -1;
         }

     }
     
     /*-------------------------------------------------------------------*/
	/* 상품전용계좌의 주문 Check                                        */
	/*-------------------------------------------------------------------*/
     if (commodityyn[0] == 'Y') {
     
     	/*
     	EXEC SQL
	    SELECT
	    	BZ73.MktTypCd
	    INTO   :mkttypcd
		FROM BZ73_MktInf BZ73, BZ52_CmdtBscInf BZ52
		WHERE 
			BZ52.CmdtCd = :inbk->cmdtcd
		AND	BZ52.MktCd = BZ73.MktCd	
		AND RTRIM(BZ73.CntyCd) = 'KR'	/*국가코드* /
		;
		
         if (sqlca.sqlcode != 0) {
            Logout("상품전용계좌 품목정보 SELECT 오류 ERROR!![%s]", sqlca.sqlerrm.sqlerrmc);
            sprintf(msgcd, "99999");
            sprintf(msg,   " 품목조회 오류 ERROR");
            return -1;
         }
         
         if (mkttypcd[0] != '5')
         {
            Logout("상품선물 이외의 주문 ERROR!![%s]", inbk->cmdtcd);
            sprintf(msgcd, "99990");
            sprintf(msg,   " 상품전용계좌는 상품선물만 가능합니다.");
			return -1;
         }
         */
         
         /* LH(86, 돈육)와 미니금선물(87)만 주문 나갈 수 있다.*/
         if (memcmp(inbk->cmdtcd, "86", 2)!=0 && memcmp(inbk->cmdtcd, "87", 2)!=0)
         {
            Logout("상품선물 이외의 주문 ERROR!![%s]", inbk->cmdtcd);
            sprintf(msgcd, "99990");
            sprintf(msg,   " 상품전용계좌는 상품선물만 가능합니다.");
			return -1;
         }
     }

        /* 제도변경 반영 개인고객투자자보호 2014.11.18 */

        EXEC SQL
        Select  Ordchkyn
        INTO    :ordchkyn
        From    BT38_ordvalidationchk
        where   STEP = 'STEPB';

        if (sqlca.sqlcode != 0) {
            sprintf (msgcd, "%.5s", "99999");
            sprintf (msg,   "적격개인투자자STEPB조회오류");
            return -1;
        }

        if(ordchkyn[0] = 'Y')
        {
            if ( prvtcorpdiv[0] == '1')
            {
				if( homefrgndiv[0] == '1')
				{

					Logout("[%s] 개인투자자 보호 제도 시작", __func__);

					if (eduyn[0] == 'N')
					{
						if (PrvtOrdRestrict( inbk->trddt,        /* 매매일       I*/
											 inbk->brkgacntno,   /* 계좌번호     I*/
											 inbk->cmdtcd,       /* 품목코드     I*/
											 inbk->combodiv,     /* 정형복합구분 I*/
											 inbk->series,       /* 종목코드     I*/
											 inbk->ordqty,       /* 주문수량     I*/
											 inbk->trddiv,       /* 매매구분     I*/
											 msgcd,              /* 에러코드     O*/
											 msg                 /* 에러메세지   O*/
											) < 0) {
							Logout("[%s] 교육미이수고객 주문 제한 : msgcd[%s] msg[%s]", __func__, msgcd, msg);
							return -1;
						}
				}
				else if (eduyn[0] == 'Y')
				{
					 Logout("[%s] 옵션가능여부 [%s]", avaloptyn);
						if (avaloptyn[0] == 'N')
						{
					  if (memcmp(inbk->cmdtcd, "04", 2) == 0)
							{
								if (PrvtOrdRestrict( inbk->trddt,        /* 매매일       I*/
													 inbk->brkgacntno,   /* 계좌번호     I*/
													 inbk->cmdtcd,       /* 품목코드     I*/
													 inbk->combodiv,     /* 정형복합구분 I*/
													 inbk->series,       /* 종목코드     I*/
													 inbk->ordqty,       /* 주문수량     I*/
												 inbk->trddiv,       /* 매매구분     I*/
												 msgcd,              /* 에러코드     O*/
												 msg                 /* 에러메세지   O*/
												) < 0) {
									   sprintf(msgcd, "95100");
									   sprintf(msg,   "해당 계좌는 변동성 지수선물 주문이 불가합니다.");
									   Logout("[%s] 변동성지수선물 주문 불가 : msgcd[%s] msg[%s]", __func__, msgcd, msg);
									   return -1;
								}
							}
						}
					}
                }
            }
        }


	/*-------------------------------------------------------------------*/
	/* 1. 영업일/장운영 Check                                            */
	/*-------------------------------------------------------------------*/
	if (OrdJobOpenChk(inbk->trddt,
					inbk->brchno,
					inbk->series,
					msgcd,
					msg) < 0) {
		Logout("[%s] 지점업무개시 Check Error : msgcd[%s] msg[%s]",
			__func__, msgcd, msg);
		return -1;
	}

	/*-------------------------------------------------------------------*/
	/* 2. 계좌 Check - 비밀번호/계좌상태/사고여부                        */
	/*-------------------------------------------------------------------*/
	if (OrdAcntChk(	inbk->brkgacntno,/* 위탁계좌번호 I*/
					inbk->dealerno,	/* 딜러번호     I*/
					inbk->pswd,		/* 계좌비밀번호 I*/
					inbk->meddiv,	/* 매체구분     I*/
					msgcd,			/* 에러코드     O*/
					msg				/* 에러메세지   O*/
					) < 0) {
		Logout("[%s] 계좌 Check Error : msgcd[%s] msg[%s]",
			__func__, msgcd, msg);
		return -1;
	}

	/*-------------------------------------------------------------------*/
	/* 3. 종목/호가정보/상하한가 Check                                   */
	/*-------------------------------------------------------------------*/
/*
	if (OrdSeriesChk(inbk->trddt,
					inbk->cmdtcd,
					inbk->combodiv,
					inbk->series,	
					inbk->ordqty,	
					inbk->ordpx,	
					inbk->ordfrm,	
					inbk->orddiv,	
					inbk->ordtyp,	
					inbk->execqtydiv,
					msgcd,				
					msg				
					) < 0) {
		Logout("[%s] 종목/호가정보 Check Error : msgcd[%s] msg[%s]",
			__func__, msgcd, msg);
		return -1;
	}
*/


	if (ChkLimit(inbk->trddt,
				inbk->acntdiv,
				inbk->brkgacntno,
				inbk->series,
				inbk->ordqty,
				msgcd,
				msg
				) < 0) {
		Logout("[%s] 한도체크 : msgcd[%s] msg[%s]", __func__, msgcd, msg);
		return -1;
	}

#ifdef _DEBUG
	Logout("[%s] >> 반복주문 기본 Check 시작................", __func__);
#endif

	return 1;
}
